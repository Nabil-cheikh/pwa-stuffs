{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/CounterButton.js","components/Header.js","components/ErrorBoundary.js","constants.js","containers/App.js","actions.js","serviceWorkerRegistration.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","console","log","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","children","CounterButton","updateCount","setState","state","count","nextProps","nextState","this","color","onClick","Component","Header","ErrorBoundary","hasError","error","info","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","text","target","value","CONST","payload","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.7fd7f349.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n    console.log(\"CardList\");\r\n    return (\r\n        <div>\r\n            {\r\n                robots.map((user, i) => {\r\n                    return (\r\n                        <Card \r\n                            key={i} \r\n                            id={robots[i].id} \r\n                            name={robots[i].name} \r\n                            email={robots[i].email} \r\n                        />\r\n                    );\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n    console.log(\"SearchBox\");\r\n    return (\r\n        <div className='pa2'>\r\n            <input \r\n                className='pa3 ba b--green bg-lightest-blue' \r\n                type='search' \r\n                placeholder='search robots' \r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{ overflowY: 'scroll', height: '780px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass CounterButton extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (this.state.count !== nextState.count)\r\n            return true;\r\n        return false;\r\n    }\r\n\r\n    updateCount = () => {\r\n        this.setState(state => {\r\n            return { count: state.count + 1 }\r\n        });\r\n    }\r\n\r\n    render() {\r\n        console.log('CounterButton');\r\n        return (\r\n            <button color={this.props.color} onClick={this.updateCount}>Count: {this.state.count}</button>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CounterButton;\r\n","import React, {Component} from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        console.log('Header');\r\n        return (\r\n            <div>\r\n                <h1 className='f1'>RoboFriends</h1>\r\n                <CounterButton color={'red'} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state= {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true});\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1 className='tc'>Ooops. That is not good</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport Header from '../components/Header';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\nimport { requestRobots, setSearchField } from '../actions';\r\n\r\nconst mapStateToProps = state => ({\r\n    searchField: state.searchRobots.searchField,\r\n    isPending: state.requestRobots.isPending,\r\n    robots: state.requestRobots.robots,\r\n    error: state.requestRobots.error\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n});\r\n\r\nclass App extends Component {\r\n\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render() {\r\n        const { searchField, onSearchChange, robots, isPending } = this.props;\r\n        const filteredRobots = robots.filter(robot => \r\n            robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n        );\r\n        return isPending ? \r\n            <h1>Loading</h1> :\r\n            (<div className='tc'>\r\n            <Header />\r\n            <SearchBox searchChange={onSearchChange}/>\r\n            <Scroll>\r\n                <ErrorBoundary>\r\n                    <CardList robots={filteredRobots}/>\r\n                </ErrorBoundary>\r\n            </Scroll>\r\n            </div>);\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import * as CONST from './constants'\r\n\r\nexport const setSearchField = (text) => ({\r\n    type: CONST.CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n    dispatch({ type: CONST.REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({ type: CONST.REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n        .catch(error => dispatch({type: CONST.REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as CONST from './constants'\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n};\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch(action.type) {\r\n        case CONST.CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, {searchField: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nconst initialStateRobots ={\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch(action.type) {\r\n        case CONST.REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true });\r\n        case CONST.REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, { robots: action.payload, isPending: false });\r\n        case CONST.REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, { error: action.payload, isPending: false });\r\n        default:\r\n            return state;\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\n// import { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App'\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\n\n// const logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store = \n  createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\nserviceWorkerRegistration.unregister();\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}